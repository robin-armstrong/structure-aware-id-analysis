import Pkg
Pkg.activate(".")
Pkg.instantiate()

using LinearAlgebra
using Random
using JLD2

include("../../algorithms/rgks.jl")
include("../../algorithms/rid.jl")

####################################################################
##################### SCRIPT PARAMETERS ############################
####################################################################

# path prefix for all output generated by this script
destination = "src/experiments/kernel_example/test"
readme      = "An experiment testing two ID algorithms on a kernel evaluation matrix."

rng          = MersenneTwister(1)   # random souce, set for reproducibility
num_clusters = 5                    # number of clusters in mixture model
num_points   = 200                  # number of points per cluster
radius       = 5                    # clusters are equispaced around a circle of this radius
noise        = .5                   # standard deviation of Gaussian mixture components
bandwidth    = 5                    # bandwidth of Gaussian kernel
krange       = 1:1:50               # range of approximation ranks to test
numtrials    = 200                  # trials per approximation rank

plot_only = false

####################################################################
##################### points GENERATION ##############################
####################################################################

if(!plot_only)
    function run_kernel_example(destination, readme, rng, num_clusters, num_points, radius, noise, bandwidth, krange, numtrials, plot_only)
        logstr  = readme*"\n\n"
        logstr *= "rng          = "*string(rng)*"\n"
        logstr *= "num_clusters = "*string(num_clusters)*"\n"
        logstr *= "num_points   = "*string(num_points)*"\n"
        logstr *= "radius       = "*string(radius)*"\n"
        logstr *= "noise        = "*string(noise)*"\n"
        logstr *= "bandwidth    = "*string(bandwidth)*"\n"
        logstr *= "krange       = "*string(krange)*"\n"
        logstr *= "numtrials    = "*string(numtrials)*"\n"

        println("\n"*logstr)
        
        logfile = destination*"_log.txt"
        touch(logfile)
        io = open(logfile, "w")
        write(logfile, logstr)
        close(io)

        angles        = range(0, 2*pi, num_clusters + 1)
        centers       = zeros(2, num_clusters)
        centers[1, :] = radius*cos.(angles[1:num_clusters])
        centers[2, :] = radius*sin.(angles[1:num_clusters])
        println(centers)

        N       = num_clusters*num_points
        points  = zeros(2, N)
        sqnorms = zeros(N)
        
        for i = 1:N
            c            = 1 + floor(Int64, num_clusters*rand(rng))
            points[:, i] = centers[c] + noise*randn(rng, 2)
            sqnorms[i]   = norm(points[:, i])^2
        end

        K  = zeros(N, N)
        K += sqnorms*ones(1, N)
        K += ones(N)*sqnorms'
        K -= 2*points'*points
        K /= -2*bandwidth^2
        broadcast!(exp, K)
    end

    run_kernel_example(destination, readme, rng, num_clusters, num_points, radius, noise, bandwidth, krange, numtrials, plot_only)
end

####################################################################
##################### PLOTTING #####################################
####################################################################